// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nordix/go-redfish/api (interfaces: RedfishAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	client "github.com/Nordix/go-redfish/client"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockRedfishAPI is a mock of RedfishAPI interface
type MockRedfishAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRedfishAPIMockRecorder
}

// MockRedfishAPIMockRecorder is the mock recorder for MockRedfishAPI
type MockRedfishAPIMockRecorder struct {
	mock *MockRedfishAPI
}

// NewMockRedfishAPI creates a new mock instance
func NewMockRedfishAPI(ctrl *gomock.Controller) *MockRedfishAPI {
	mock := &MockRedfishAPI{ctrl: ctrl}
	mock.recorder = &MockRedfishAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedfishAPI) EXPECT() *MockRedfishAPIMockRecorder {
	return m.recorder
}

// EjectVirtualMedia mocks base method
func (m *MockRedfishAPI) EjectVirtualMedia(arg0 context.Context, arg1, arg2 string, arg3 map[string]interface{}) (client.RedfishError, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EjectVirtualMedia", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(client.RedfishError)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EjectVirtualMedia indicates an expected call of EjectVirtualMedia
func (mr *MockRedfishAPIMockRecorder) EjectVirtualMedia(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EjectVirtualMedia", reflect.TypeOf((*MockRedfishAPI)(nil).EjectVirtualMedia), arg0, arg1, arg2, arg3)
}

// GetManager mocks base method
func (m *MockRedfishAPI) GetManager(arg0 context.Context, arg1 string) (client.Manager, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManager", arg0, arg1)
	ret0, _ := ret[0].(client.Manager)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManager indicates an expected call of GetManager
func (mr *MockRedfishAPIMockRecorder) GetManager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManager", reflect.TypeOf((*MockRedfishAPI)(nil).GetManager), arg0, arg1)
}

// GetManagerVirtualMedia mocks base method
func (m *MockRedfishAPI) GetManagerVirtualMedia(arg0 context.Context, arg1, arg2 string) (client.VirtualMedia, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagerVirtualMedia", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.VirtualMedia)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManagerVirtualMedia indicates an expected call of GetManagerVirtualMedia
func (mr *MockRedfishAPIMockRecorder) GetManagerVirtualMedia(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagerVirtualMedia", reflect.TypeOf((*MockRedfishAPI)(nil).GetManagerVirtualMedia), arg0, arg1, arg2)
}

// GetRoot mocks base method
func (m *MockRedfishAPI) GetRoot(arg0 context.Context) (client.Root, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoot", arg0)
	ret0, _ := ret[0].(client.Root)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRoot indicates an expected call of GetRoot
func (mr *MockRedfishAPIMockRecorder) GetRoot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoot", reflect.TypeOf((*MockRedfishAPI)(nil).GetRoot), arg0)
}

// GetSystem mocks base method
func (m *MockRedfishAPI) GetSystem(arg0 context.Context, arg1 string) (client.ComputerSystem, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystem", arg0, arg1)
	ret0, _ := ret[0].(client.ComputerSystem)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSystem indicates an expected call of GetSystem
func (mr *MockRedfishAPIMockRecorder) GetSystem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystem", reflect.TypeOf((*MockRedfishAPI)(nil).GetSystem), arg0, arg1)
}

// InsertVirtualMedia mocks base method
func (m *MockRedfishAPI) InsertVirtualMedia(arg0 context.Context, arg1, arg2 string, arg3 client.InsertMediaRequestBody) (client.RedfishError, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVirtualMedia", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(client.RedfishError)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// InsertVirtualMedia indicates an expected call of InsertVirtualMedia
func (mr *MockRedfishAPIMockRecorder) InsertVirtualMedia(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVirtualMedia", reflect.TypeOf((*MockRedfishAPI)(nil).InsertVirtualMedia), arg0, arg1, arg2, arg3)
}

// ListManagerVirtualMedia mocks base method
func (m *MockRedfishAPI) ListManagerVirtualMedia(arg0 context.Context, arg1 string) (client.Collection, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagerVirtualMedia", arg0, arg1)
	ret0, _ := ret[0].(client.Collection)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListManagerVirtualMedia indicates an expected call of ListManagerVirtualMedia
func (mr *MockRedfishAPIMockRecorder) ListManagerVirtualMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagerVirtualMedia", reflect.TypeOf((*MockRedfishAPI)(nil).ListManagerVirtualMedia), arg0, arg1)
}

// ListManagers mocks base method
func (m *MockRedfishAPI) ListManagers(arg0 context.Context) (client.Collection, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagers", arg0)
	ret0, _ := ret[0].(client.Collection)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListManagers indicates an expected call of ListManagers
func (mr *MockRedfishAPIMockRecorder) ListManagers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagers", reflect.TypeOf((*MockRedfishAPI)(nil).ListManagers), arg0)
}

// ListSystems mocks base method
func (m *MockRedfishAPI) ListSystems(arg0 context.Context) (client.Collection, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSystems", arg0)
	ret0, _ := ret[0].(client.Collection)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSystems indicates an expected call of ListSystems
func (mr *MockRedfishAPIMockRecorder) ListSystems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSystems", reflect.TypeOf((*MockRedfishAPI)(nil).ListSystems), arg0)
}

// ResetSystem mocks base method
func (m *MockRedfishAPI) ResetSystem(arg0 context.Context, arg1 string, arg2 client.ResetRequestBody) (client.RedfishError, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSystem", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.RedfishError)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResetSystem indicates an expected call of ResetSystem
func (mr *MockRedfishAPIMockRecorder) ResetSystem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSystem", reflect.TypeOf((*MockRedfishAPI)(nil).ResetSystem), arg0, arg1, arg2)
}

// SetSystem mocks base method
func (m *MockRedfishAPI) SetSystem(arg0 context.Context, arg1 string, arg2 client.ComputerSystem) (client.ComputerSystem, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSystem", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.ComputerSystem)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetSystem indicates an expected call of SetSystem
func (mr *MockRedfishAPIMockRecorder) SetSystem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSystem", reflect.TypeOf((*MockRedfishAPI)(nil).SetSystem), arg0, arg1, arg2)
}
